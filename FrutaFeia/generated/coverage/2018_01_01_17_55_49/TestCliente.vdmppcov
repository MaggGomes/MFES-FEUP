class TestCliente is subclass of TestFrutaFeia
instance variables
	agricultor: Agricultor := new Agricultor("Pedro", "Mirandela");
	produto: Produto := new Produto("Maca", "Golden", 5);

operations
  public testConstructor() == (  
  	dcl cliente: Cliente := new Cliente("Fernando", <HOMEM>);
    IO`println("\t\t Testing Constructor");
    assertEqual("Fernando", cliente.nome);
    assertEqual(<HOMEM>, cliente.genero);
    assertEqual(<SEM_ENC>, cliente.estadoEnc);
  );
  
  public testAssociaMudaRemoveCesta() == (
  	dcl cliente: Cliente := new Cliente("Fernando", <HOMEM>);
  	dcl cestaA: Cesta := new Cesta();
  	dcl cestaB: Cesta := new Cesta();
  	IO`println("\t\t Testing AssociaCesta");
  	assertEqual(<SEM_ENC>, cliente.estadoEnc);
  	cliente.associaCesta(cestaA);
  	cliente.mudaCesta(cestaB);
  	assertEqual(<COM_ENC>, cliente.estadoEnc);
  	cliente.removeCesta();
  	assertEqual(<CANCELADA>, cliente.estadoEnc);
  );
    
  public testUseCaseCesta() == (
  	dcl cliente: Cliente := new Cliente("Fernando", <HOMEM>);
  	dcl cesta: Cesta := new Cesta();
  	IO`println("\t\t Testing AssociaCesta");
  	assertEqual(<SEM_ENC>, cliente.estadoEnc);
  	cliente.associaCesta(cesta);
  	assertEqual(<COM_ENC>, cliente.estadoEnc);
  	cliente.encomendaPronta();
  	assertEqual(<PRONTA>, cliente.estadoEnc);
  	cliente.levantaCesta();
  	assertEqual(<ENTREGUE>, cliente.estadoEnc);
  );

  public testAll() == (
    IO`println("\t Testing Cliente class");
    testConstructor();
    testAssociaMudaRemoveCesta();
    testUseCaseCesta();
  );

end TestCliente